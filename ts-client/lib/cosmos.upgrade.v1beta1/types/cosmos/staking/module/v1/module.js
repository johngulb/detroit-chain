// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: cosmos/staking/module/v1/module.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "cosmos.staking.module.v1";
function createBaseModule() {
    return { hooksOrder: [], authority: "", bech32PrefixValidator: "", bech32PrefixConsensus: "" };
}
export const Module = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.hooksOrder) {
            writer.uint32(10).string(v);
        }
        if (message.authority !== "") {
            writer.uint32(18).string(message.authority);
        }
        if (message.bech32PrefixValidator !== "") {
            writer.uint32(26).string(message.bech32PrefixValidator);
        }
        if (message.bech32PrefixConsensus !== "") {
            writer.uint32(34).string(message.bech32PrefixConsensus);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.hooksOrder.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.bech32PrefixValidator = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.bech32PrefixConsensus = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hooksOrder: globalThis.Array.isArray(object?.hooksOrder)
                ? object.hooksOrder.map((e) => globalThis.String(e))
                : [],
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            bech32PrefixValidator: isSet(object.bech32PrefixValidator) ? globalThis.String(object.bech32PrefixValidator) : "",
            bech32PrefixConsensus: isSet(object.bech32PrefixConsensus) ? globalThis.String(object.bech32PrefixConsensus) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.hooksOrder?.length) {
            obj.hooksOrder = message.hooksOrder;
        }
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.bech32PrefixValidator !== "") {
            obj.bech32PrefixValidator = message.bech32PrefixValidator;
        }
        if (message.bech32PrefixConsensus !== "") {
            obj.bech32PrefixConsensus = message.bech32PrefixConsensus;
        }
        return obj;
    },
    create(base) {
        return Module.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseModule();
        message.hooksOrder = object.hooksOrder?.map((e) => e) || [];
        message.authority = object.authority ?? "";
        message.bech32PrefixValidator = object.bech32PrefixValidator ?? "";
        message.bech32PrefixConsensus = object.bech32PrefixConsensus ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
