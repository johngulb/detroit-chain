// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: cosmos/tx/config/v1/config.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "cosmos.tx.config.v1";
function createBaseConfig() {
    return { skipAnteHandler: false, skipPostHandler: false };
}
export const Config = {
    encode(message, writer = new BinaryWriter()) {
        if (message.skipAnteHandler !== false) {
            writer.uint32(8).bool(message.skipAnteHandler);
        }
        if (message.skipPostHandler !== false) {
            writer.uint32(16).bool(message.skipPostHandler);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.skipAnteHandler = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.skipPostHandler = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            skipAnteHandler: isSet(object.skipAnteHandler) ? globalThis.Boolean(object.skipAnteHandler) : false,
            skipPostHandler: isSet(object.skipPostHandler) ? globalThis.Boolean(object.skipPostHandler) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.skipAnteHandler !== false) {
            obj.skipAnteHandler = message.skipAnteHandler;
        }
        if (message.skipPostHandler !== false) {
            obj.skipPostHandler = message.skipPostHandler;
        }
        return obj;
    },
    create(base) {
        return Config.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConfig();
        message.skipAnteHandler = object.skipAnteHandler ?? false;
        message.skipPostHandler = object.skipPostHandler ?? false;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
