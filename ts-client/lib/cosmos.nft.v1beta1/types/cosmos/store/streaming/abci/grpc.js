// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: cosmos/store/streaming/abci/grpc.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { RequestFinalizeBlock, ResponseCommit, ResponseFinalizeBlock } from "../../../../tendermint/abci/types";
import { StoreKVPair } from "../../v1beta1/listening";
export const protobufPackage = "cosmos.store.streaming.abci";
function createBaseListenFinalizeBlockRequest() {
    return { req: undefined, res: undefined };
}
export const ListenFinalizeBlockRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.req !== undefined) {
            RequestFinalizeBlock.encode(message.req, writer.uint32(10).fork()).join();
        }
        if (message.res !== undefined) {
            ResponseFinalizeBlock.encode(message.res, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenFinalizeBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.req = RequestFinalizeBlock.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.res = ResponseFinalizeBlock.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            req: isSet(object.req) ? RequestFinalizeBlock.fromJSON(object.req) : undefined,
            res: isSet(object.res) ? ResponseFinalizeBlock.fromJSON(object.res) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.req !== undefined) {
            obj.req = RequestFinalizeBlock.toJSON(message.req);
        }
        if (message.res !== undefined) {
            obj.res = ResponseFinalizeBlock.toJSON(message.res);
        }
        return obj;
    },
    create(base) {
        return ListenFinalizeBlockRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListenFinalizeBlockRequest();
        message.req = (object.req !== undefined && object.req !== null)
            ? RequestFinalizeBlock.fromPartial(object.req)
            : undefined;
        message.res = (object.res !== undefined && object.res !== null)
            ? ResponseFinalizeBlock.fromPartial(object.res)
            : undefined;
        return message;
    },
};
function createBaseListenFinalizeBlockResponse() {
    return {};
}
export const ListenFinalizeBlockResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenFinalizeBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListenFinalizeBlockResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListenFinalizeBlockResponse();
        return message;
    },
};
function createBaseListenCommitRequest() {
    return { blockHeight: 0, res: undefined, changeSet: [] };
}
export const ListenCommitRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.blockHeight !== 0) {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.res !== undefined) {
            ResponseCommit.encode(message.res, writer.uint32(18).fork()).join();
        }
        for (const v of message.changeSet) {
            StoreKVPair.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenCommitRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.blockHeight = longToNumber(reader.int64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.res = ResponseCommit.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.changeSet.push(StoreKVPair.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
            res: isSet(object.res) ? ResponseCommit.fromJSON(object.res) : undefined,
            changeSet: globalThis.Array.isArray(object?.changeSet)
                ? object.changeSet.map((e) => StoreKVPair.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHeight !== 0) {
            obj.blockHeight = Math.round(message.blockHeight);
        }
        if (message.res !== undefined) {
            obj.res = ResponseCommit.toJSON(message.res);
        }
        if (message.changeSet?.length) {
            obj.changeSet = message.changeSet.map((e) => StoreKVPair.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListenCommitRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListenCommitRequest();
        message.blockHeight = object.blockHeight ?? 0;
        message.res = (object.res !== undefined && object.res !== null)
            ? ResponseCommit.fromPartial(object.res)
            : undefined;
        message.changeSet = object.changeSet?.map((e) => StoreKVPair.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListenCommitResponse() {
    return {};
}
export const ListenCommitResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenCommitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListenCommitResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListenCommitResponse();
        return message;
    },
};
export const ABCIListenerServiceServiceName = "cosmos.store.streaming.abci.ABCIListenerService";
export class ABCIListenerServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || ABCIListenerServiceServiceName;
        this.rpc = rpc;
        this.ListenFinalizeBlock = this.ListenFinalizeBlock.bind(this);
        this.ListenCommit = this.ListenCommit.bind(this);
    }
    ListenFinalizeBlock(request) {
        const data = ListenFinalizeBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListenFinalizeBlock", data);
        return promise.then((data) => ListenFinalizeBlockResponse.decode(new BinaryReader(data)));
    }
    ListenCommit(request) {
        const data = ListenCommitRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListenCommit", data);
        return promise.then((data) => ListenCommitResponse.decode(new BinaryReader(data)));
    }
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
